$Id$
$Author$
(FreeMED Module API Documentation)
(c) 2001 LGPL
==============================================================================

freemedModule Superclass -----------------------------------------------------

	This class is the class that all FreeMED module classes are derived
	from. All FreeMED modules inheirit this class's properties.

	VARIABLES ------------------------------------------------------------

	variable $MODULE_NAME
		This is the name of the current module. It can contain spaces,
		and is the name that is seen by the user of the system.

	variable $MODULE_VERSION
		This is the numeric module version. It can be versioned with
		multiple dots, but no letters. It is used to perform
		upgrades, etc.
		example:
			$this->MODULE_VERSION = "0.2.1.2";

	variable $MODULE_DESCRIPTION
		This is a description of the module, displayed in the
		module_information.php script.

	variable $MODULE_AUTHOR
		This is the name and email address of the coder responsible
		for this module. It should be in the format "name (email)".
		example:
			$this->MODULE_AUTHOR = "Jeff (jeff@ourexchange.net)";

	variable $MODULE_VENDOR
		This is the name of the vendor responsible for this module.
		By default, it is "Stock FreeMED Module".
		example:
			$this->MODULE_VENDOR = "SomeMediCo Inc.";

	variable $DEPENDENCY
		This is the list of class names of modules that this module
		depends upon. If those modules are not present, this module
		will not be listed and will not load.
		example:
			$this->DEPENDENCY = array (
				"episodeOfCareEMRModule",
				"procedureEMRModule"
			);

	METHODS --------------------------------------------------------------

	constructor freemedModule ()
		The constructor calls the parent module class and the
		setup routines for the module in setup().

	function footer ()
		Displays the FreeMED footer, and should be called after
		module execution.

	function header ()
		Displays the FreeMED header, and should be called before
		any information is displayed.

	function setup ()
		Registers module in FreeMED module registry and updates
		database definitions if neccesary.

	function _setup ()
		Contains actual module setup routines. (STUB)

	function _update ()
		Contains actual module update routines. (STUB)

freemedMaintenanceModule class -----------------------------------------------

	This module is the basic module for database maintenance functions,
	such as the ICD codes database or insurance companies.

	VARIABLES ------------------------------------------------------------

	variable $form_vars
		This is the array that is passed to html_form::form_table()
		to create the addition/modification form. It should be
		declared in the constructor due to a PHP limitation.
		example:
			$this->form_vars = array (
				"Last Name" =>
					html_form::text_widget("last_name"),
				"First Name" =>
					html_form::text_widget("first_name")
			);

	variable $table_name
		Name of the SQL table that this modifies. This table should
		have an auto incrementing field called "id", which FreeMED
		uses to perform delete operations, etc.

	variable $variables
		Array of variables and values. This should be defined in
		the constructor, as PHP does not allow function calls in
		var definitions in classes.
		example :
			$this->variables = array (
				"patid",
				"specify_me" => $this_var + 10
			);

	METHODS --------------------------------------------------------------

	constructor freemedMaintenanceModule ()
		Calls freemedModule constructor.

	function check_vars ()
		Returns true if all neccesary variables are present, false
		if they are not (and executes trigger_error()). This should
		be overridden in most cases.

	function add ()
		This is a wrapper for _add(). It should, for the most part,
		not be overridden.

	function _add ()
		This performs the actual addition operation, and should not
		be overridden or called directly.

	function addform ()
		This generally just calls form().

	function create_table ()
		This creates the SQL table definition for the current table.
		It is called by _setup(), and should not be called
		independantly of that. It, by default, uses the values in
		$this->table_definition to call class sql->create_table_query()
		to create the SQL table.

	function del ()
		This is a wrapper for _del(). It should, for the most part,
		not be overridden.

	function _del ()
		This performs the actual deletion operation, and should not
		be overridden or called directly.

	function main ()
		This calls the different "action"s that the module can
		perform, and acts as a switchboard. With very few exceptions
		this should *NOT* be overridden.

	function mod ()
		This is a wrapper for _mod(). It should, for the most part,
		not be overridden.

	function _mod ()
		This performs the actual modification operation, and should
		not be overridden or called directly.

	function modform ()
		This generally just calls form().

	function _setup ()
		This routine calls create_table() and possibly imports
		stock data. It should *NOT* be overridden.

	function view ()
		This is the default "view" action that is called when
		$action has no value. It should be overridden.

==============================================================================
