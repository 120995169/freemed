<?php
/***********************************************************/
/* Wizard
/* by Jamiel Spezia 2006 - 2006
/***********************************************************/

class ConnectionWizard
{
    /***********************************************************/
    /* Constructor
    /***********************************************************/
    function ConnectionWizard($handler)
    {
        //0 - no mode
        //1 - open mode
        //2 - new mode
        $this->mode = 0;
        $this->window = &new GtkWindow;
        $this->window->connect_simple('delete-event', array(&$this, 'Hide'));
      //  $this->window->connect_simple('key_press_event', array(&$this,'KeyTest'));
        $this->window->set_title(_a('Connection wizard'));
        $this->window->set_position(GTK_WIN_POS_CENTER);
        $this->window->set_default_size(500,450);
        $this->window->realize();

        $this->handler = $handler;

        $this->aProjects = Project::ReadProjects();

        //Instance background image
        //$this->PixStart = GdkPixmap::create_from_xpm($this->window->window, null, 'interface/connection_wizard.xpm');
	//modificado por Miguel casanova
	$color = &new GdkColor(0, 65535, 65535);     
  	 $this->PixStart = GdkPixmap::create_from_xpm($this->window->window, $color, 'interface/connection_wizard.xpm');

        //Instance title style
        $this->TitleStyle = &new GtkStyle();
       //$this->TitleStyle->fg[GTK_STATE_NORMAL] = new GdkColor('#FFFFFF');
       // $this->TitleStyle->font = gdk::font_load ("-*-helvetica-bold-r-*-*-*-180-*-*-*-*-*-*");
	// $this->TitleStyle->font = Gtk::gdk_font_load   ("-*-helvetica-bold-r-*-*-*-180-*-*-*-*-*-*");


	
	
        //$this->pageStyle = &new GtkStyle();
       // $this->pageStyle->bg[GTK_STATE_NORMAL] = new GdkColor('#8CB6DB');

        $this->notebook = &new GtkNotebook();

	$this->notebook->modify_font(new PangoFontDescription("Times New Roman Italic 10"));
	
       // $this->notebook->set_style($this->pageStyle);
        $this->notebook->insert_page($this->generateMain()          , new GtkLabel('0'), 0);

        //New project
        $this->notebook->insert_page($this->generateNewProject()    , new GtkLabel('1'), 1);
        $this->notebook->insert_page($this->generateConfigDb()      , new GtkLabel('2'), 2);
        //Open project
     $this->notebook->insert_page($this->generateOpenProject()   , new GtkLabel('3'), 3);
        //Final wizard

        $this->notebook->insert_page($this->generateCongratulation(), new GtkLabel('4'), 4);
       $this->notebook->set_show_tabs(false);
        $hbox = new GtkHBox;
        $this->window->add($this->notebook);
 
        $this->setFields();

        $this->Show();
    }

    /***********************************************************/
    /* Generate the main screen
    /***********************************************************/
    function generateMain()
    {
	
	$color = &new GdkColor(0, 65535, 65535);

        $fixed = &new GtkFixed;
        $fixed->set_style($this->pageStyle);
       // $Start = &new GtkPixmap($this->PixStart[0], $this->PixStart[1]);




	$pixbuf = $this->PixStart[0];
	$Start = new GtkImage();
	//$Start->set_from_pixbuf($pixbuf);

        $fixed->put($Start, 0, 0);
        $Title = &new GtkLabel(_a('Welcome to the agata wizard!'));
        $Title->set_style($this->TitleStyle);
        $fixed->put($Title, 70, 15);

        //Instance title style
        $buttonStyle = &new GtkStyle();
      //  $buttonStyle->bg[GTK_STATE_NORMAL]   = new GdkColor('#709DCB');
       // $buttonStyle->bg[GTK_STATE_PRELIGHT] = new GdkColor('#8CB6DB');
        //$buttonStyle->font = gdk::font_load ("-*-helvetica-bold-r-*-*-*-180-*-*-*-*-*-*");



	

        //$pix = GdkPixmap::create_from_xpm($this->window->window, $color, 'interface/open.xpm');
	
	$pixbuf = GdkPixbuf::new_from_file('interface/open.xpm');
	$image = new GtkImage();
	$image->set_from_pixbuf($pixbuf);


	$buttonOpen = new GtkButton();
	$buttonOpen->set_image($image);

        $buttonOpen->set_size_request(150, 100);
        $buttonOpen->set_style($buttonStyle);
        $buttonOpen->connect_simple('clicked', array(&$this, 'next_page'), '3');
        $hbox = &new GtkHBox();

       // $hbox->pack_start($image);

        $hbox->pack_start(new GtkLabel(_a('Open project')));

       // $buttonOpen->add($hbox);
        $fixed->put($buttonOpen, 66, 200 );

       // $pix = GdkPixmap::create_from_xpm($this->window->window, $color, 'interface/filenew.xpm');
        //$image = &new GtkPixmap($pix[0], $pix[1]);
        

	$pixbuf = GdkPixbuf::new_from_file('interface/filenew.xpm');
	$image = new GtkImage();
	$image->set_from_pixbuf($pixbuf);

	$buttonNew = new GtkButton();
	$buttonNew->set_image($image);
        $buttonNew->set_size_request(150, 100);
       // $buttonNew->set_style($buttonStyle);
        $buttonNew->connect_simple('clicked', array(&$this, 'next_page'), '1');
    
  $hbox = &new GtkHBox();
        //$hbox->pack_start($image);
      
       $hbox->pack_start(new GtkLabel(_a('New project')));
       // $buttonNew->add($hbox);
        $fixed->put($buttonNew, 282, 200 );
        return $fixed;
    }

    /***********************************************************/
    /* Generate the new project screen
    /***********************************************************/
    function generateNewProject()
    {
        $fixed = &new GtkFixed;
        $fixed->set_style($this->pageStyle);
        
	$pixbuf = GdkPixbuf::new_from_file('interface/filenew.xpm');
	$Start = new GtkImage();
	$Start->set_from_pixbuf($pixbuf);


	//$Start = &new GtkPixmap($this->PixStart[0], $this->PixStart[1]);
        $fixed->put($Start, 0, 0);
        $Title = &new GtkLabel(_a('New project - characteristic of the project'));
        $Title->set_style($this->TitleStyle);
        $fixed->put($Title, 70, 15);

        $line = 70;
        $col  = 10;
        $fixed->put(new GtkLabel(_a('Name'))        , $col, $line);
        $fixed->put(new GtkLabel(_a('Description')) , $col, $line+=30);
        $fixed->put(new GtkLabel(_a('Author'))      , $col, $line+=110);
        $fixed->put(new GtkLabel(_a('Date'))        , $col, $line+=30);

        $line = 70;
        $col  = 100;
        $this->projectName = new GtkEntry();
        $fixed->put($this->projectName, $col, $line);
	
        $this->description = new  GtkTextview();
        $this->description->set_size_request(200,100);
        $this->description->set_editable(true);
        $scroll = &new GtkScrolledWindow();
        $scroll->add($this->description);
        $scroll->set_size_request(300, 100);
        $scroll->set_policy(GTK_POLICY_NEVER, GTK_POLICY_ALWAYS);
        $fixed->put($scroll  , $col, $line+=30);

        $this->author = new GtkEntry();
        $fixed->put($this->author       , $col, $line+=110);

        $this->date = new GtkEntry();
        $this->date->set_editable(false);

        $fixed->put($this->date         , $col, $line+=30);

        $fixed->put($this->buttonNext(2, array(&$this, 'validateNewProject')), 340, 410);
        $fixed->put($this->buttonPrev(0), 10, 410);

        return $fixed;
    }

    function validateNewProject()
    {
        $project = $this->projectName->get_text();
        if (strlen($project) <= 0)
        {
            $error = _a('Please, enter with project name');
        }
        elseif ( Project::ExistProject($this->projectName->get_text()) )
        {
            $error = _a('The project already exist');
        }
        if ($error)
        {
            new Dialog($error);
            $this->next_page(1);
        }
    }

    /***********************************************************/
    /* Generate the config data base screen
    /***********************************************************/
    function generateConfigDb()
    {
        $fixed = &new GtkFixed;
        $fixed->set_style($this->pageStyle);
        //$Start = &new GtkPixmap($this->PixStart[0], $this->PixStart[1]);

	$pix = $this->PixStart[0];
	$Start = new GtkImage();
	//$Start->set_from_pixbuf($pix);


        $fixed->put($Start, 0, 0);
        $Title = &new GtkLabel(_a('New project - configure the database'));
        $Title->set_style($this->TitleStyle);
        $fixed->put($Title, 70, 15);

        $line = 70;
        $col  = 10;
        $fixed->put(new GtkLabel(_a('Database Host/SID/DSN'))   , $col, $line);
        $fixed->put(new GtkLabel(_a('Database type'))           , $col, $line+=30);
        $fixed->put(new GtkLabel(_a('Database name'))           , $col, $line+=30);
        $fixed->put(new GtkLabel(_a('User'))                    , $col, $line+=30);
        $fixed->put(new GtkLabel(_a('Password'))                , $col, $line+=30);
        $fixed->put(new GtkLabel(_a('Data dictionary'))         , $col, $line+=30);

        $line = 70;
        $col  = 150;


        $this->host = new GtkCombo();
        $fixed->put($this->host  , $col, $line);

        $this->type = new GtkCombo();
        $eType = $this->type->entry;
        $eType->set_editable(false);
        $fixed->put($this->type  , $col, $line+=30);

        $this->name = &new FileBox(null, false);
        $this->name->set_size_request(126, 22);
        $this->name->set_text($Content);
        $fixed->put($this->name->box  , $col, $line+=30);

        $this->user = new GtkEntry();
        $fixed->put($this->user  , $col, $line+=30);

        $this->password = new GtkEntry();
        $this->password->set_visibility(false);
        $fixed->put($this->password  , $col, $line+=30);

        $this->dataDictionary = new GtkCombo();
        $eDataDictionary = $this->dataDictionary->entry;
        $eDataDictionary->set_editable(false);
        $fixed->put($this->dataDictionary  , $col, $line+=30);

        $fixed->put($this->buttonNext(2, $this->handler, 2), 340, 410);
        $fixed->put($this->buttonPrev(1), 10, 410);

        return $fixed;
    }

    function dataHost()
    {
        if ( $this->aProjects )
        {
            foreach ($this->aProjects as $project)
            {
                if ($project['host'])
                {
                    $dataHost[$project['host']] = $project['host'];
                }
            }
            $dataHost[0] = '';
            sort($dataHost);
        }

        return $dataHost;
    }

    function databaseVars()
    {
        //Open mode
        if ($this->mode == 1)
        {
            $databaseVars = $this->dataOpenProject;
        }
        elseif ($this->mode == 2) //New mdoe
        {
            $eHost = $this->host->entry;
            $eType = $this->type->entry;
            $eDataDictionary = $this->dataDictionary->entry;
            //Project data
            $databaseVars->projectName  = $this->projectName->get_text();
        //    $databaseVars->desc         = $this->description->get_text();
	    $buffer = $this->description->get_buffer();
	    $databaseVars->desc = $buffer->get_text($buffer->get_start_iter(), $buffer->get_end_iter());
	    	


            $databaseVars->author       = $this->author->get_text();
            $databaseVars->date         = $this->date->get_text();
            //Connection data
            $databaseVars->host         = $eHost->get_text();
            $databaseVars->type         = $eType->get_text();
            $databaseVars->name         = $this->name->get_text();
            $databaseVars->user         = $this->user->get_text();
            $databaseVars->pass         = $this->password->get_text();
            $databaseVars->dict         = $eDataDictionary->get_text();
        }


        return $databaseVars;
    }

    /***********************************************************/
    /* Generate the open project screen
    /***********************************************************/
    function generateOpenProject()
    {
        $fixed = &new GtkFixed;
        $fixed->set_style($this->pageStyle);
       // $Start = &new GtkPixmap($this->PixStart[0], $this->PixStart[1]);

	$pixbuf = $this->PixStart;
	$Start = new GtkImage();
	//$Start->set_from_pixbuf($pixbuf);



        $fixed->put($Start, 0, 0);
        $Title = &new GtkLabel(_a('Open project'));
        $Title->set_style($this->TitleStyle);
        $fixed->put($Title, 70, 15);

        $line = 70;
        $col  = 10;
        $fixed->put(new GtkLabel(_a('Project name'))                , $col, $line);
        $fixed->put(new GtkLabel(_a('Details of the selected project'))      , $col+=180, $line);

        $line = 90;
        $col  = 10;
        $this->projectList = new ProjectList();
        $this->projectList->connect_simple('move-cursor', array(&$this, 'selectProject'));
	$this->projectList->connect_simple('event', array(&$this, 'selectProject'));
	

                
	$scroll = new GtkScrolledWindow;
        $scroll->set_policy(GTK_POLICY_ALWAYS, GTK_POLICY_ALWAYS);
        $scroll->add($this->projectList);
        $scroll->set_size_request(140, 200);
        $fixed->put($scroll, $col, $line);

        $this->listing = new Listing(array(_a('Field'), _a('Content')));
        //$this->listing->set_column_width(0, 100);
        //$this->listing->set_size_request(200, 200);
        $scroll = new GtkScrolledWindow;
        //$scroll->set_policy(GTK_POLICY_ALWAYS, GTK_POLICY_ALWAYS);
        $scroll->add($this->listing);
        $scroll->set_size_request(300, 200);
        $fixed->put($scroll  , $col+=180, $line);

        $fixed->put($this->buttonNext(3, $this->handler, 1), 340, 410);
        $fixed->put($this->buttonPrev(0), 10, 410);

        return $fixed;
    }

    function generateCongratulation()
    {   
     $fixed = &new GtkFixed;
        $fixed->set_style($this->pageStyle);


	$color = &new GdkColor(0, 65535, 65535);     
  	//$Pix = GdkPixmap::create_from_xpm($this->window->window, $color, 'interface/connection_wizard.xpm');

	$pix = GdkPixbuf::new_from_file('interface/connection_wizard.xpm');
	
	$Start = new GtkImage();
	$Start->set_from_pixbuf($Pix);



        //$Start = &new GtkPixmap($this->PixStart[0], $this->PixStart[1]);

        $fixed->put($Start, 0, 0);
        $Title = &new GtkLabel(_a('Congratulations!'));
        $Title->set_style($this->TitleStyle);
        $fixed->put($Title, 70, 15);
        $Text = &new GtkLabel (_a('You are connected to project'));
        $fixed->put($Text, 70, 50);
        $line = 70;
        $col  = 10;

        $fixed->put($this->buttonClose(), 340, 410);
        //$fixed->put($this->buttonNewReport(), 340, 410);
        //$fixed->put($this->buttonClose(), 230, 410);

        return $fixed;
    }

    /***********************************************************/
    /* 
    /***********************************************************/
    function selectProject()
    { 
        $projectName = $this->projectList->getSelection();
        $project = $this->aProjects[$projectName];
       
	if (!$project  ) return false;

        $this->dataOpenProject->projectName = $projectName;
        foreach ($project as $key=>$p)
        {
            $this->dataOpenProject->$key = $p;
            if ( $key = Project::FieldName($key) )
            {
                $data[] = array($key, $p);
            }
        }
       
	$this->listing->clear();
        $this->listing->AppendItems($data);

    }

    function connectButtonNewReport($handler)
    {
        $this->buttonReport->connect_simple('clicked', $handler);
    }

    function buttonNewReport($handler=null)
    {     
       // $pix = GdkPixmap::create_from_xpm($this->window->window, $color, 'interface/ico_new.xpm');


	$color = &new GdkColor(0, 65535, 65535);     
  	$pix = GdkPixmap::create_from_xpm($this->window->window, $color, 'interface/ico_new.xpm');
	$image = new GtkImage();
	$image->set_from_pixbuf($pix);



       // $image->set_from_pixbuf($pixbuf);
	$this->buttonReport->set_image($image);
        $this->buttonReport = new GtkButton();
        $this->buttonReport->set_relief(GTK_RELIEF_HALF);
        $this->buttonReport->set_size_request(150, 30);
        $this->buttonReport->connect_simple('clicked', array(&$this, 'Hide'), $page);
        $hbox = &new GtkHBox();
        $hbox->pack_start($image);
        $hbox->pack_start(new GtkLabel(_a('New report')));
        $this->buttonReport->add($hbox);

        return $this->buttonReport;
    }

    function buttonClose($handler=null)
    {$color = &new GdkColor(0, 65535, 65535);     
      //  $pix = GdkPixmap::create_from_xpm($this->window->window, $color, 'interface/ico_close.xpm');
       // $image = &new GtkPixmap($pix[0], $pix[1]);

	$pix = GdkPixbuf::new_from_file('interface/ico_close.xpm');
	$image = new GtkImage();
	$image->set_from_pixbuf($Pix);


        $buttonClose = new GtkButton(_a('Close'));
	$buttonClose->set_image($image);
        $buttonClose->set_relief(GTK_RELIEF_HALF);
        $buttonClose->set_size_request(100, 30);
        $buttonClose->connect_simple('clicked', array(&$this, 'Hide'), $page);
       // $hbox = &new GtkHBox();
       // $hbox->pack_start($image);
       // $hbox->pack_start(new GtkLabel(_a('Close')));
       // $buttonClose->add($hbox);

        if ($handler)
        {
            $buttonClose->connect_simple('clicked', $handler);
        }

        return $buttonClose;
    }

    function buttonPrev($page, $handler=null)
    {   $color = &new GdkColor(0, 65535, 65535);     
        //$pix = GdkPixmap::create_from_xpm($this->window->window, $color, 'interface/ico_prev.xpm');
        //$image = &new GtkPixmap($pix[0], $pix[1]);


	$pix = GdkPixbuf::new_from_file('interface/ico_prev.xpm');
	$image = new GtkImage();
	$image->set_from_pixbuf($pix);


        $buttonPrev = new GtkButton(_a('Prev'));
	$buttonPrev->set_image($image);
        $buttonPrev->set_relief(GTK_RELIEF_HALF);
        $buttonPrev->set_size_request(150, 30);
        $buttonPrev->connect_simple('clicked', array(&$this, 'next_page'), $page);
        //$hbox = &new GtkHBox();
        //$hbox->pack_start($image);
        //$hbox->pack_start(new GtkLabel(_a('Prev')));
        //$buttonPrev->add($hbox);

        if ($handler)
        {
            $buttonPrev->connect_simple('clicked', $handler);
        }

        return $buttonPrev;
    }

    function buttonNext($page, $handler=null, $mode=0)
    {   $color = &new GdkColor(0, 65535, 65535);     
       // $pix = GdkPixmap::create_from_xpm($this->window->window, $color, 'interface/ico_next.xpm');
        //$image = &new GtkPixmap($pix[0], $pix[1]);


	$pix = GdkPixbuf::new_from_file('interface/ico_next.xpm');
	$image = new GtkImage();
	$image->set_from_pixbuf($pix);


        $buttonNext = new GtkButton(_a('Next'));
	$buttonNext->set_image($image);
        $buttonNext->set_size_request(150, 30);
        $buttonNext->connect_simple('clicked', array(&$this, 'next_page'), $page, $mode);
       // $hbox = &new GtkHBox();
        //$hbox->pack_start(new GtkLabel(_a('Next')));
       // $hbox->pack_start($image);
        //$buttonNext->add($hbox);

        if ($handler)
        {
            $buttonNext->connect_simple('clicked', $handler);
        }

        return $buttonNext;
    }

    /***********************************************************/
    /* Alter screen
    /***********************************************************/
    function next_page($page, $mode=0)
    {
        $this->mode = $mode;
        $this->notebook->set_current_page($page);
    }

    function setFields()
    {   try
	{
        include_once 'include/util.inc';

        $this->projectName->set_text('');
       // $this->description->delete_text(0,-1);
        $this->author->set_text('');
        $this->date->set_text('');
        $this->date->set_text(date('Y-m-d'));
        $host = $this->host->entry;
        $host->set_text('localhost');
        $this->name->set_text('pruebas');
        $this->user->set_text('miguelacg');
        $this->password->set_text('12050970');
        $dataDictionary = $this->dataDictionary->entry;
        $dataDictionary->set_text('');

        $this->aProjects = Project::ReadProjects();
        $aDict = Dictionary::ListDictionaries();
        $aDB = suported_databases_type();
        $this->host->set_popdown_strings($this->dataHost());
        $this->dataDictionary->set_popdown_strings($aDict);
        $this->type->set_popdown_strings($aDB);
     
        $this->projectList->ClearProjects();

        $this->projectList->SetProjects($this->aProjects);
	 	
	}
	 catch(Exception $e)
	{
		
		echo $e;
	}
	    
     }

    /***********************************************************/
    /* Show the Window
    /***********************************************************/
    function Show()
    {
        $this->window->show_all();
        return true;
    }

    /***********************************************************/
    /* Hides the Window
    /***********************************************************/
    function Hide()
    {
        $this->window->hide();
        return true;
    }

    /***********************************************************/
    /* Test the key pressed
    /***********************************************************/
    function KeyTest($p1)
    {
        if ($p1->keyval == K_ESC)
        {
            $this->Hide();
        }
        /*else if ($p1->keyval == K_ENTER)
        {
            $this->DatabaseVars->onEnter();
        }*/
    }

}
