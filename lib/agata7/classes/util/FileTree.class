<?
/***********************************************************/
/* Class defining the filetree box
/* by Pablo Dall'Oglio 2001-2006
/***********************************************************/
class FileTree extends GtkTreeView
{
  protected $model;
  protected $scrolled_win;
  
  protected $column;

  protected $icon_folder_open;
  protected $icon_folder_closed;

  protected $title;
  protected $trace;
    /***********************************************************/
    /* Constructor Method
    /***********************************************************/
      public function __construct() {
                

		
		// Crea un list store para definir la estructura del modelo de datos del gtktreeview 
		    
           	    
		   $this->model = new GtkTreeStore(Gtk::TYPE_STRING);
		
	
		   parent::__construct($this->model);
		   $this->connect_simple('row-activated', array(&$this, 'Abrir'));
        	//set up treeview columns
		  

			   $column = new GtkTreeViewColumn();
// for image
			     $cell_renderer = new GtkCellRendererPixbuf();
			     $column->pack_start($cell_renderer, false);
			     $column->set_cell_data_func($cell_renderer,array(&$this, 'format_col')); 
	
			     $cell_renderer->set_property('pixbuf-expander-open',
			     GdkPixbuf::new_from_file('interface/ico_folder2.xpm'));
			     $cell_renderer->set_property('pixbuf-expander-closed',
			     GdkPixbuf::new_from_file('interface/ico_folder1.xpm'));






				// for text

			      $cell_renderer = new GtkCellRendererText();
			      $column->pack_start($cell_renderer, true);
			      $column->set_attributes($cell_renderer, 'text', 0);
			   
                              $this->append_column($column);
	                      $column->set_title('Archivo');

		 
		

                   $this->show();

    
		$this->set_grid_lines(Gtk::TREE_VIEW_GRID_LINES_HORIZONTAL);
		$this->BotaoOk = new GtkButton;
        	$this->SetShowExtension(true);

      }	
    
   //establece los iconos que se mostraran en el treeview
	function format_col($column, $cell, $model, $iter)
	 {
	    $value = $model->get_value($iter, 0); // get the current path
		 if (strstr($value,'.agt') && !strstr($value,'.agt~') ) { $cell->set_property('pixbuf', GdkPixbuf::new_from_file('interface/ico_agata.xpm'));}
	 
	 if (strstr($value,'.agt~') ) $cell->set_property('pixbuf', GdkPixbuf::new_from_file('interface/ico_output.xpm'));
	
	}




    function SetShowExtension($flag)
    {
        $this->ShowExtension = $flag;
    }

    /***********************************************************/
    /* Opens the selected node
    /***********************************************************/
    function Abrir()
    {

         $selecao = $this->get_selection();
	 list($model, $iter) =$selecao->get_selected(); // note 3
	 $Arquivo= $model->get_value($iter, 0); 



        //$selecao = $this->selection[0];
        //$Arquivo = GtkTreeView::node_get_row_data($selecao);
        if (is_dir($Arquivo) && (!$this->opened[$Arquivo]))
        {  
            $this->opened[$Arquivo] = true;
            $this->AbreDiretorio($Arquivo, $selecao, null);
            //GtkTreeView::expand($selecao);
        }
        elseif (is_dir($Arquivo) && ($this->opened[$Arquivo]))
        {
            //GtkTreeView::expand($selecao);
        }
        elseif ($Arquivo=='home')
        {
            //GtkTreeView::expand($selecao);
        }
        else
        {
            $botao = $this->BotaoOk;
            $botao->clicked();
        }
    }

    /***********************************************************/
    /* Removes a node and file
    /***********************************************************/
    function Apagar()
    {
    

	 $selecao =  $this->get_selection();
	 list($model, $iter) =$selecao->get_selected();
	 $Arquivo= $model->get_value($iter, 0); 

        if (is_dir($Arquivo))
        {
            include_once 'Dialog.class';
            new Dialog('Sem ação');
        }
        else
        {
            GtkTreeView::remove_node($selecao);
            unlink($Arquivo);
        }
    }

    function GetModel()
    {
       return $this->model;
    }

    /***********************************************************/
    /* Difine allowed extensions
    /***********************************************************/
    function DefineExtensions($extensions)
    {
        $this->extensions = $extensions;
    }

    /***********************************************************/
    /* Opens a directory, loads it into the tree
    /***********************************************************/
    function AbreDiretorio($Diretorio, $NodoRaiz)
    {
        global $Pixmaps;

        if (!$NodoRaiz)
        {
            $entries = $this->entries;
            $entries[] = $Diretorio;
            $this->entries = $entries;
        }
        $extensions = $this->extensions;
        
        $ico = $Pixmaps['home'];
        
        $dir = @opendir($Diretorio);
        if (!$dir)
        {
            return;
        }

        while (($arquivo = readdir($dir)) !== false)
        {
            $Caminho = "$Diretorio" . bar . "$arquivo";
            
            if (is_dir($Caminho))
                $arquivo = ' ' . $arquivo;
            
            if (substr(trim($arquivo),0,1) != '.')
            {
                if (($extensions) && (is_file($Caminho)))
                {
                    foreach ($extensions as $ext)
                    {
                        if (strstr($arquivo, $ext))
                        {
                            $filelist[] = $arquivo;
                        }
                    }
                }
                else
                {
                    $filelist[] = $arquivo;
                }
            }
        }
        
        if ($filelist)
        {
            sort($filelist);
            foreach ($filelist as $arquivo)
            {
                $arquivo = trim($arquivo);
                $Caminho = "$Diretorio" . bar . "$arquivo";
                if ($arquivo == '.' || $arquivo == '..')
                continue;
                
                if (is_dir($Caminho))
                {
                    $ico1 = $Pixmaps['folder1'];
                    $ico2 = $Pixmaps['folder2'];
                  //  $NodoPasta = GtkTreeView::insert_node(
                   //     $NodoRaiz, null, array($arquivo), 5,
                    //    $ico1[0], $ico1[1], $ico2[0], $ico2[1], false, false);
		    


                     $NodoPasta=$this->model->append($NodoRaiz,array($arquivo));	
		
                    
                    $this->AbreDiretorio($Caminho, $NodoPasta);
                    //GtkTreeView::node_set_row_data($NodoPasta, $Caminho);
                }
                else
                {
                    $posicao = explode('.', $arquivo);
                    $node_text = '';

                    if ($this->ShowExtension)
                    {
                        $node_text = $arquivo;
                    }
                    else
                    {
                        for($n = 0; $n<count($posicao)-1; $n++)
                        {
                            $node_text .= $node_text ? '.' . $posicao[$n] : $posicao[$n];
                        }
                    }

                    $ext = $posicao[count($posicao)-1];
					$ico = $Pixmaps[$ext];
                    if (!$ico)
                        $ico = $Pixmaps['generic'];

                   // $NodoFilho = GtkTreeView::insert_node(
                    //    $NodoRaiz, null , array($node_text), 5,
                     //   $ico[0], $ico[1], $ico[0], $ico[1], true, false);



		
 			$NodoFilho=$this->model->append($NodoRaiz,array($node_text));
                    
                   // GtkTreeView::node_set_row_data($NodoFilho, $Caminho);
                }
            }
        }
       // GtkTreeView::thaw();
    }




    function AbreDiretorioold($Diretorio, $NodoRaiz) {
	

	    if (!isset($NodoRaiz)) {
		//$Diretorio= $Diretorio;
	    }


	    if (!is_dir($Diretorio)) {
	      trigger_error("PhpGtkDirectoryTree : "
		. "directory not found",
		E_USER_WARNING);
	      return false;
	    }
	    $this->model->clear();
	    $root = $Diretorio;
	    $dir_list = array($root);
	    $nodes = array();
	    $nodes[$root] = null;

	    while (count($dir_list)>0) {
	      $dir = array_shift($dir_list);
	      $this->trace("folder = $dir\n");

	      // add the directories first
	      if ($handle = opendir($dir)) {
		while (false !== ($file = readdir($handle))) {
		  if ($file != "." && $file != "..") {
		    $fullpath = $dir.'/'.$file;
		    if (is_dir($fullpath)) {
		      $nodes[$fullpath] = $this->model->append(
		        $nodes[$dir], array($file));
		      array_push($dir_list, $fullpath);
		    }
		  }
		}
		closedir($handle);
	      }

	      $num_files = 0;
	      // then add the files
	      if ($handle = opendir($dir)) {
		while (false !== ($file = readdir($handle))) {
		  if ($file != "." && $file != "..") {
		    $fullpath = $dir.'/'.$file;
		  if (!is_dir($fullpath)) {
		    $nodes[$fullpath] = $this->model->append(
		      $nodes[$dir], array($file));
		    ++$num_files;
		    }
		  }
		}
		closedir($handle);
	      }

	      # FIXME : bug here when directory is empty (no files or only sub-directories)
	      if ($num_files==0)
		$nodes[$fullpath] = $this->model->append(
		  $nodes[$dir], array(''));
	    }
     }




    /***********************************************************/
    /* Reloads the tree
    /***********************************************************/
    function ReadAgain()
    {
        $this->opened = null;
      
        //GtkTreeView::thaw();
        $this->MyClear();  
        $entries = $this->entries;
        $this->entries = null;
        
        if ($entries)
        {
            foreach($entries as $entry)
            {
                $this->AbreDiretorio($entry, null);
            }
        }
    }

    /***********************************************************/
    /* Clear all the contents
    /***********************************************************/
    function MyClear()
    {
	$this->model->clear();
        $this->model = new GtkTreeStore(Gtk::TYPE_STRING);
	$this->set_model($this->model);

        //GtkTreeView::thaw();
     //   $this->entries = null;
    }
    
    function AddHome($Home, $pixmap = null)
    {
        global $Pixmaps;
		$ico = ($pixmap ? $pixmap : $Pixmaps['home']);

      //  $node = GtkTreeView::insert_node(
        //    $NodoNull, null, array(':: ' . $Home), 5,
         //   $ico[0], $ico[1], $ico[0], $ico[1], false, false);

	$node=$this->model->append($NodoNull,array(':: ' . $Home));	
       
	//GtkTreeView::node_set_row_data($node, 'home');

	$this->model->append($node, array('home'));

        return $node;
    }
   function trace($txt) {
    if ($this->trace)
      echo "$txt";
  }
}
?>
