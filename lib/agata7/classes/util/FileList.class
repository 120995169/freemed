<?
class FileList extends GtkTreeview
{protected $model;
 protected $names;

    function  __construct($title, $names)
    {

        $this->names = $names;
    	$this->model = new GtkListStore(Gtk::TYPE_STRING);
	parent::__construct($this->model);
	
	
	$this->connect_simple('select-cursor-row', array(&$this, 'Pop'));	
            
	$this->connect_simple('event', array(&$this, 'Pop'));

 	$column = new GtkTreeViewColumn();
// for image
	$cell_renderer = new GtkCellRendererPixbuf();
	$column->pack_start($cell_renderer, false);
	$column->set_cell_data_func($cell_renderer,array(&$this, 'format_col'));	

	

       // for text
        $cell_renderer = new GtkCellRendererText();
 	$column->pack_start($cell_renderer, true);
        $column->set_attributes($cell_renderer, 'text', 0);
        $column->set_title($title);



	$this->append_column($column);
	$this->set_grid_lines(Gtk::TREE_VIEW_GRID_LINES_HORIZONTAL);
	$this->set_enable_tree_lines(true);
        $this->BotaoOk = new GtkButton;
        $this->show();
        $this->CreateMenu();
    }
    
//establece los iconos que se mostraran en el treeview
	function format_col($column, $cell, $model, $iter)
	 {
	 $cell->set_property('pixbuf', GdkPixbuf::new_from_file('interface/ico_description.xpm'));
	 
	}


    function SetExtension($ext)
    {
        $this->Extension = $ext;
    }
    
    function SetWidth($width = 140)
    {   //--------comentado por miguel casanova
        //GtkTreeview::set_column_width(0, $width);
    }
    
    function Load($directory)
    {
        global $Pixmaps;
        $this->Directory = $directory;
        $data = getSimpleDirArray($directory);
        
        foreach ($data as $line)
        {
            $item = substr($line, 0, -4);
	    $row=	  $this->model->append(array($item));
	 	
        //    GtkTreeview::set_pixtext($row, 0, trim($item), 5, $Pixmaps['ico_desc'][0], $Pixmaps['ico_desc'][1]);
        }
    }
    
    function Reload()
    {
        
	$this->model->clear();
	$this->model = new GtkListStore(Gtk::TYPE_STRING);
	$this->set_model($this->model);        
	$this->Load($this->Directory);
    }

    /***********************************************************/
    /* Pop the File Explorer options
    /***********************************************************/
    function Pop()
    {
        $Menu = $this->Menu;
        $Menu->show_all();
        $Menu->popup();
    }

    /***********************************************************/
    /* Creates the PopMenu Options
    /***********************************************************/
    function CreateMenu()
    {
        global $Pixmaps;
        $this->Menu = $Menu = new GtkMenu;
        $names = $this->names;

        if (!$names)
        {
            $Menuitem1 = new GtkMenuItem( _a('Open'));
	    $Menuitem1->connect_simple('activate', array(&$this, 'Open'));
	    $this->ItemOpen =$Menuitem1;

            $Menuitem2 = new GtkMenuItem( _a('Delete'));
	    $Menuitem2->connect_simple('activate', array(&$this, 'Delete'));
	    $this->ItemDel =$Menuitem2 ;

        }
        else
        {
            if ($names[0])
            {
               $Menuitem1 = new GtkMenuItem( _a($names[0][1]) );
	       $Menuitem1->connect_simple('activate', array(&$this, 'Open'));
	       $this->ItemOpen  =$Menuitem1 ;

            }
            
            if ($names[1])
            {
                $Menuitem2 = new GtkMenuItem( _a($names[1][1]));
	        $Menuitem2->connect_simple('activate', array(&$this, 'Delete'));
		$this->ItemDel =$Menuitem2 ;

            }
        }
        
        
        $Menuitem3 = new GtkMenuItem;
        $Menuitem4 = new GtkMenuItem( _a('Close'));
	$Menuitem4->connect_simple('activate', null);
	

        if ($Menuitem1)
        {
            $Menu->append($Menuitem1);
        }
        if ($Menuitem2)
        {
            $Menu->append($Menuitem2);
        }
        $Menu->append($Menuitem3);
        $Menu->append($Menuitem4);
    }
    
    function Open()
    {
        $row = $this->selection[0];
        $data = GtkTreeview::get_pixtext($row, 0);
        $file = $this->Directory . bar . $data[0] . '.' . $this->Extension;
        if (is_file($file))
        {
            call_user_func($this->OpenAction, $file);
        }
    }
    
    function Delete($flag = false)
    {
        $row = $this->selection[0];
        $data = GtkTreeview::get_pixtext($row, 0);
        $file = $this->Directory . bar .    $data[0] . '.' . $this->Extension;

        if (!$flag)
        {
            $b = new Ask(_a('Do you really want to delete ?'), array(&$this,'Delete'), null, array(true));
            return true;
        }
        else
        {
            if (is_file($file))
            {
                $t1 = unlink($file);
                if (!$t1)
                {
                    new Dialog(_a('Cannot remove the file'));
                }
                else
                {
                 //   GtkTreeview::freeze();
                    GtkTreeview::remove($row);
                  //  GtkTreeview::thaw();
                }
            }
        }
    }
}
?>
