<?
/***********************************************************/
/* Database Tree
/* by Pablo Dall'Oglio 2001-2006
/***********************************************************/
class TableTree extends GtkTreeView
{protected $model;
 	
    /***********************************************************/
    /* Constructor Method
    /********************************************************/

	function  __construct($Title='', $nick=true)
    	{

		   $this->model= new GtkTreeStore(Gtk::TYPE_STRING);
		    parent::__construct($this->model);
		    $this->set_enable_tree_lines(true);
                    $v=array($Title);
	
		    $this->count = count($v);

		    for ($n=0; $n<count($v); $n++)
		    {      
			  

	
				 $column = new GtkTreeViewColumn();

			   	// for image
				     $cell_renderer = new GtkCellRendererPixbuf();
				     $column->pack_start($cell_renderer, false);
				     $column->set_cell_data_func($cell_renderer,array(&$this, 'format_col'));	
	 
				     $cell_renderer->set_property('pixbuf-expander-open',
				     GdkPixbuf::new_from_file('interface/ico_table.xpm'));
				     $cell_renderer->set_property('pixbuf-expander-closed',
				     GdkPixbuf::new_from_file('interface/ico_table.xpm'));

			    // for text

				     $cell_renderer = new GtkCellRendererText();
	     			     $column->pack_start($cell_renderer, true);
                                     $column->set_attributes($cell_renderer, 'text', $n);



			   $this->append_column($column);
			 
	      		   $column->set_title($Title);
		     }
		    $this->handler = $this->connect_simple('row-activated', array(&$this, 'Abrir'));	
		    

		$this->expand_all();
        
        $this->BotaoOk = new GtkButton;
        $this->nick = $nick;
        $this->opened = null;
         $this->show();
	
    }
 
 //establece los iconos que se mostraran en el treeview
	function format_col($column, $cell, $model, $iter)
	 {
	 $cell->set_property('pixbuf', GdkPixbuf::new_from_file('interface/ico_field.xpm'));
	 
	}


    /***********************************************************/
    /* Load specific tables
    /***********************************************************/
    function LoadTheseTables($DbAttributes, $Tables, $DataDescription)
    {
        global $Pixmaps;

        $pixmap = $Pixmaps['table'];
        $this->DbAttributes = $DbAttributes;
        $this->agataDataDescription = $DataDescription;
        if ($this->handler)
        {
            GtkTreeView::disconnect($this->handler);
            $this->handler = null;
        }
        
        foreach ($Tables as $Table)
        {
            $Table = trim($Table);
            $index = "table:$Table";
	    echo  "$index"; 	
            if (!$this->Tables[$Table])
            {
                $this->Tables[$Table] = true;
                
                if ($this->nick)
                {
                    $text = ($this->SeekDataDescription($index)) ? array($this->SeekDataDescription($index)) : array($Table);
                }
                else
                {
                    $text = array($Table);
                }

               // $table = GtkCtree::insert_node(null, null, $text, 5,
                //$pixmap[0], $pixmap[1], $pixmap[0], $pixmap[1], false, false);

		 $table = $this->model->append(null, $text);
                
                //GtkCtree::node_set_row_data($table, $index);
                $this->LoadFields($index, $table);


            }
        }
	$this->expand_all();
    }

    /***********************************************************/
    /* Load all the Database tables
    /***********************************************************/
    function LoadTables($DbAttributes, $DataDescription)
    {
        global $Pixmaps;
        $this->ClearTree();
        $this->agataDataDescription = $DataDescription;
        $this->DbAttributes    = $DbAttributes;
        
        $pixmap = $Pixmaps['table'];
        $conn   = new AgataConnection;
        
        $Pass   = $conn->Open($this->DbAttributes);
        if (!$Pass)
        {
            $conn->Close();
            return false;
        }
        
        $Tables = $conn->LoadTables();
        $conn->Close();
        
        foreach ($Tables as $Table)
        {
            $index = "table:$Table";
            if ($this->nick)
            {
                $text = ($this->SeekDataDescription($index)) ? $this->SeekDataDescription($index) : $Table;
            }
            else
            {
                $text = $Table;
            }
		
            
            $Tablesok[$index] = $text;
        }
        asort ($Tablesok);
        
        foreach ($Tablesok as $index => $text)
        {
            //$table = GtkCtree::insert_node(null, null, array($text), 5,
           // $pixmap[0], $pixmap[1], $pixmap[0], $pixmap[1], false, false);
		
	   $table= $this->model->append(null,array($text));

            
            //GtkCtree::node_set_row_data($table, $index);
        }
	$this->expand_all();
    }

    /***********************************************************/
    /* Clear the tree
    /***********************************************************/
    function ClearTree()
    {
	//        GtkCtree::clear();
          $this->model= new GtkTreeStore(Gtk::TYPE_STRING);
		  
	
	
	$this->set_model($this->model);


	
        $this->opened = null;
        $this->Tables = null;
    }

    /***********************************************************/
    /* Returns the information about the current node
    /***********************************************************/
    function GetInfo()
    {
	// $selection = $this->selection;
    
	        $selection = $this->get_selection();
		if (!$selection) return false;

		 if ($selection)
		{

		list($model, $iter) = $selection->get_selected(); // note 3
		$field = $model->get_value($iter, 0); // note 4

		$iter = $model->iter_parent($iter);
		$tabla = $model->get_value($iter, 0); // note 4
	   	
		 return 'Table:'.$tabla.':Field:'.$field;
		}
		return false;
          

    }

    /***********************************************************/
    /* Expand the current node
    /***********************************************************/
    function ExpandCurrent()
    {
	//----comentado por miguel casanova
        //$selecao = $this->selection[0];
        //GtkCTree::expand($selecao);
	$this->expand_all();
    }

    /***********************************************************/
    /* Removes the current node
    /***********************************************************/
    function RemoveCurrent()
    { //---------comentado por miguel casanova
       // $selecao = $this->selection[0];

	$selection = $this->get_selection();
	list($model, $iter) = $selection->get_selected(); // note 3
	$text  = $model->get_value($iter, 0); // note 4

	if ($iter==NULL || !isset($text) || !$text) return false;
       // $text = GtkCTree::node_get_row_data($selecao);
        //$pieces = explode(':', $text);
        $table = $text;
	//$table = $pieces[1];
        $this->Tables[$table] = false;
     //   GtkCTree::remove_node($selecao);
	 $this->model->remove($iter);     
	return true;
     
	}

    /***********************************************************/
    /* Opens the current node
    /***********************************************************/
    function Abrir()
    {
       // $selecao = $this->selection[0];

        $selecao= $this->get_selection();
	list($model, $iter) = $selecao->get_selected(); // note 3
	$text  = $model->get_value($iter, 0); // note 4

	if ($iter==NULL || !isset($text) || !$text) return false;

/*
        $index = GtkCTree::node_get_row_data($selecao);
        $pieces = explode(':', $index);
        $is_table = (count($pieces) == 2);
   */
        $index = 'table:'.$model->get_value($iter, 0);
	
        $pieces = explode(':', $index);
        $is_table = (count($pieces) == 2);
      
	
        if ($is_table && (!$this->opened[$index]))
        {
            $this->opened[$index] = true;


/*            if ($this->LoadFields($index, $selecao))
            {
                $this->expand($selecao);

            }*/

            if ($this->LoadFields($index, $iter))
            {
                $this->expand_all();

            }
        }
        elseif ($is_table && ($this->opened[$index]))
        {
            //$this->expand($selecao);
            $this->expand_all();

        }
        else
        {
            $botao = $this->BotaoOk;
            $botao->clicked();
        }
    }

    /***********************************************************/
    /* Load all the fields of a table
    /***********************************************************/
    function LoadFields($index, &$NodoRaiz)
    {
        global $Pixmaps;

        $tmp = explode(':', $index);
        $Table = $tmp[1];
        $pixmap = $Pixmaps['field'];
        $conn = new AgataConnection;
        $Pass = $conn->Open($this->DbAttributes);
        
        $Fields = $conn->LoadFields($Table);
        if (!$Fields)
        {
            $conn->Close();
            new Dialog($Table . ': ' . _a('This table does not belong to this database'));
            return;
        }
        $conn->Close();
        if ($Fields)
        {
            foreach ($Fields as $Field)
            {
                if (trim($Field))
                {
                    $index = "table:$Table:field:$Field";
                    if ($this->nick)
                    {
                        $nodetext = ($this->SeekDataDescription($index)) ? array($this->SeekDataDescription($index)) : array($Field);

                    }
                    else
                    {
                        $nodetext = array($Field);
                    }
                    
                 //   $field = GtkCtree::insert_node($NodoRaiz, null, $nodetext, 5, $pixmap[0], $pixmap[1], $pixmap[0], $pixmap[1], false, false);




		  $field  = $this->model->append($NodoRaiz, $nodetext);


 			//$root = GtkTreeView::insert_node($parent, null, $node, 5,
      			//  $Pixmap[0], $Pixmap[1], $Pixmap[0], $Pixmap[1], false, false);

  
        		
	



                   // GtkCTree::node_set_row_data($field, $index);
                    
                }
            }
            return true;
        }
    }

    function SeekDataDescription($index)
    {
        if ($this->agataDataDescription[$index])
        {
            return $this->agataDataDescription[$index];
        }
        else
        {
            $pieces = explode(':', $index);
            if (count($pieces) == 2)
            {
                $upper = $this->agataDataDescription[$pieces[0] . ':' . strtoupper($pieces[1])];
                $lower = $this->agataDataDescription[$pieces[0] . ':' . strtolower($pieces[1])];
                
                return ($upper ? $upper : $lower);
            }
            else
            {
                $upper = $this->agataDataDescription[$pieces[0] . ':' . strtoupper($pieces[1]) . ':' . $pieces[2] . ':' . strtoupper($pieces[3])];
                $lower = $this->agataDataDescription[$pieces[0] . ':' . strtolower($pieces[1]) . ':' . $pieces[2] . ':' . strtolower($pieces[3])];
                
                return ($upper ? $upper : $lower);
            }
        }
    }
}
?>
