<?
/***********************************************************/
/* Tree handler, a wrapper for FileExplorer
/* by Pablo Dall'Oglio 2001-2006
/***********************************************************/
class TreeHandler extends GtkVBox
{
//protected $FileTree;

    /***********************************************************/
    /* Constructor Method
    /***********************************************************/
    
     function  __construct($FileTree, $names = null, $horizontal = false) {
               
      try
      {
	 $this->horizontal = $horizontal;
         $this->agataConfig = AgataConfig::ReadConfig();
        $this->names = $names;

		$this->FileTree=$FileTree;
		
	        parent::__construct();
		$scroll = new GtkScrolledWindow;
	        $view = new GtkViewPort;
	        $hbox = new GtkHBox;
	        $scroll->add($view);
	        $view->add($hbox);
	        $hbox->pack_start($this->FileTree);
		$this->pack_start( $scroll);
		$this->show();	



		




        $this->CreateMenu();
        $this->OpenAction = new GtkButton();
        $botao = $this->FileTree->BotaoOk;
       
        $botao->connect_simple('clicked', array(&$this, 'Pop'));
	$this->FileTree->set_enable_tree_lines(true);
        $this->show_all();
    }
    catch(Exception $e)
    {
		
			echo '---error classes TreeHandler($FileTree, $names = null, $horizontal = false) ' . $e;
    }

	
    }

    /***********************************************************/
    /* Pop the File Explorer options
    /***********************************************************/
    function Pop()
    {
        $Menu = $this->Menu;
        $Menu->show_all();
        $Menu->popup();
    }

    /***********************************************************/
    /* Creates the PopMenu Options
    /***********************************************************/
    function CreateMenu()
    {
        global $Pixmaps;
        $this->Menu = $Menu = new GtkMenu;
        $names = $this->names;





        if (!$names)
        { 
            $Menuitem1 = new GtkMenuItem( _a('Open'));
	    $Menuitem1->connect_simple('activate', array(&$this, 'Open'));
	    $this->ItemOpen =$Menuitem1;

            $Menuitem2 = new GtkMenuItem( _a('Delete'));
	    $Menuitem2->connect_simple('activate', array(&$this, 'Delete'));
	    $this->ItemDel =$Menuitem2 ;
        }
        else
        {
            if ($names[0])
            {
          $Menuitem1 = new GtkMenuItem( _a($names[0][1]) );
	       $Menuitem1->connect_simple('activate', array(&$this, 'Open'));
	       $this->ItemOpen  =$Menuitem1 ;
           }
            
            if ($names[1])
            {
              $Menuitem2 = new GtkMenuItem( _a($names[1][1]));
	        $Menuitem2->connect_simple('activate', array(&$this, 'Delete'));
		$this->ItemDel =$Menuitem2 ;
            }
        }
        
        

    
        $Menuitem3 = new GtkMenuItem;
        $Menuitem4 = new GtkMenuItem( _a('Close'));
	$Menuitem4->connect_simple('activate', null);
	

        $Menu->append($Menuitem1);
        if ($Menuitem2)
        {
            $Menu->append($Menuitem2);
        }
        $Menu->append($Menuitem3);
        $Menu->append($Menuitem4);
    }



    /***********************************************************/
    /* Creates the toolbar
    /***********************************************************/
    function CreateToolBar()
    {
        global $Pixmaps;
        GtkVBox::realize();

        if ($this->horizontal)
            $ButtonBox = new GtkVBox;
        else
            $ButtonBox = new GtkHBox;

        GtkBox::pack_start($ButtonBox, false, false);

        $ButtonBox->pack_start($a = new Button(array(&$this, 'CreateFolder'),  _a('Create Folder'), $Pixmaps['folder_new'], ICONBUTTON), false, false);
        $ButtonBox->pack_start($b = new Button(array(&$this, 'Open'),          _a('Open'),          $Pixmaps['file_open'],  ICONBUTTON), false, false);
        $ButtonBox->pack_start($c = new Button(array(&$this, 'Delete'),        _a('Delete'),        $Pixmaps['file_del'],   ICONBUTTON), false, false);

        $a->set_relief(GTK_RELIEF_NONE);
        $b->set_relief(GTK_RELIEF_NONE);
        $c->set_relief(GTK_RELIEF_NONE);
    }

    /***********************************************************/
    /* Complementary options
    /***********************************************************/
    function CreateToolBar2()
    {
        GtkVBox::realize();
        $ButtonBox = new GtkHBox;
        GtkVBox::pack_start($ButtonBox, false, false);
        $ButtonBox->pack_start(new GtkHBox);
 	
	$color = &new GdkColor(0, 65535, 65535);
        $pixmap =  images . 'ico_require.xpm';
        $ButtonBox->pack_start($b = new Button(array(&$this, 'Open'),    _a('Apply'), $pixmap, IMAGEBUTTON), false, false);
        
        $b->set_relief(GTK_RELIEF_NONE);
    }


 /***********************************************************/
    /* Complementary options  SQL TEMPLATE
    /***********************************************************/
    function CreateToolBar3()
    {
        GtkVBox::realize();
        $ButtonBox = new GtkHBox;
        GtkVBox::pack_start($ButtonBox, false, false);
        $ButtonBox->pack_start(new GtkHBox);
 	
	$color = &new GdkColor(0, 65535, 65535);
        $pixmap =  images . 'ico_require.xpm';
        $ButtonBox->pack_start($b = new Button(array(&$this, 'OpenNodeSQL'),    _a('Apply'), $pixmap, IMAGEBUTTON), false, false);
        
        $b->set_relief(GTK_RELIEF_NONE);
    }
    /***********************************************************/
    /* Asks by the Folder name
    /***********************************************************/
    function CreateFolder()
    {
        $FileTree = $this->FileTree;
        $node = $FileTree->selection[0];
        if ($node)
        {
            $info = $FileTree->node_get_row_data($node);
            if (is_dir($info))
            {
                $this->InputBox = new InputBox(_a('Folder Name'), 180, '');
                $button =  $this->InputBox->button;
                $button->connect_simple('clicked', array(&$this,'MakeFolder'), $node, $info);
            }
            else
            {
                new Dialog(_a('Cannot create the directory'));
            }
        }
        else
        {
            $this->InputBox = new InputBox(_a('Folder Name'), 180, '');
            $button =  $this->InputBox->button;
            $button->connect_simple('clicked', array(&$this,'MakeFolder'), null, $FileTree->entries[0]);
        }
    }

    /***********************************************************/
    /* Creates the folder
    /***********************************************************/
    function MakeFolder($node, $folder)
    {
        global $Pixmaps;
        $InputBox = $this->InputBox;
        $Item = $InputBox->InputEntry->get_text();
        $InputBox->Close();
        $FileTree = $this->FileTree;
        $Caminho =  $folder . bar . $Item;
        if (mkdir($Caminho))
        {
            $ico1 = $Pixmaps['folder1'];
            $ico2 = $Pixmaps['folder2'];
            $NodoPasta = $FileTree->insert_node($node, null, array($Item), 5, $ico1[0], $ico1[1], $ico2[0], $ico2[1], false, false);
            $FileTree->node_set_row_data($NodoPasta, $Caminho);
        }
        else
        {
            new Dialog(_a('Cannot create the directory'));
        }
    }




    /***********************************************************/
    /* Opens a node
    /***********************************************************/
    function Open()
    {
        
          
       // $node = $FileTree->selection[0];



	
	
            $selection = $this->FileTree->get_selection();
	    list($model, $iter) = $selection->get_selected(); // note 3
	    $node= $model->get_value($iter, 0); 

	    $iter = $model->iter_parent($iter);
	    $nodopadre = $model->get_value($iter, 0); // note 4
	


        if (!$node)
        {
            return;
        }

        $Menu = $this->Menu;
        if ($Menu)
        {
            $Menu->popdown();
        }
        
        //$info = $FileTree->node_get_row_data($node);
        $info =$node;
		

	$info=	AGATA_PATH . "/".$this->folder."/".$nodopadre.'/'.$info;
	echo "$info";

        if (($info) &&  is_file($info))// arquivo
        { 

	   	
            $ItemOpen = $this->OpenAction;
            $ItemOpen->emit('clicked');
	    
        }
        else
        {
           // $FileTree->expand_row( $FileTree,$node);


		 
        }

    }

	function folder($foldername){
		$this->folder=$foldername;
	}
 /***********************************************************/
    /* Opens a node
    /***********************************************************/
    function OpenNodeSQL()
    {
        $FileTree = $this->FileTree;
       // $node = $FileTree->selection[0];
	$selection=$FileTree->get_selection();
	list($model, $iter) = $selection->get_selected(); // note 3
	$infopath=$model->get_path($iter);
	$node = $model->get_value($iter, 0);

	
        if (!$node)
        {
            return;
        }

        $Menu = $this->Menu;
        if ($Menu)
        {
            $Menu->popdown();
        }
        
        //$info = $FileTree->node_get_row_data($node);
        $info =$node;
		

	$info=	$this->agataConfig['general']['SqlDir'].'/'.$info;
	

        if (($info) &&  is_file($info))// arquivo
        { 
            $ItemOpen = $this->OpenAction;
            $ItemOpen->emit('clicked');
        }
        else
        {
           // $FileTree->expand_row( $FileTree,$node);


		 
        }
    }



    /***********************************************************/
    /* Deletes the selected node (file or dir)
    /***********************************************************/
    function Delete($flag = false)
    {
        $FileTree = $this->FileTree;
        $node = $FileTree->selection[0];
        
        if (!$flag)
        {
            $b = new Ask(_a('Do you really want to delete ?'), array(&$this,'Delete'), null, array(true));
            return true;
        }
        else
        {
            if ($node)
            {
                $info = $FileTree->node_get_row_data($node);
                if (is_file($info)) // arquivo
                {
                    $t1 = unlink($info);
                    if (!$t1)
                    {
                        new Dialog(_a('Cannot remove the file'));
                    }
                    else
                    {
                        $FileTree->remove_node($node);
                    }
                }
                else
                {
                    $t1 = rmdir($info);
                    if (!$t1)
                    {
                        new Dialog(_a('Cannot remove the directory'));
                    }
                    else
                    {
                        $FileTree->remove_node($node);
                    }
                }
            }
        }
    }
    
}
?>
