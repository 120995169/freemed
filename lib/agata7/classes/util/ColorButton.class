<?
/***********************************************************/
/* ColorButton, used to allows the user to choose colors
/* by Pablo Dall'Oglio 2004-2006
/***********************************************************/
class ColorButton
{
    /***********************************************************/
    /* Constructor Method
    /***********************************************************/
    function ColorButton($Description)
    {
        global $Pixmaps;
        $tooltip = &new GtkTooltips;
        $this->button = &new GtkButton('');

        $box = &new GtkHBox;
        $this->widget = new Box($box, $Description);
        $tooltip->set_tip($this->button, _a('Color Selection'), '');

        

	$pixbuf = GdkPixbuf::new_from_file($Pixmaps['cor']);
	$pixmap = new GtkImage();
	$pixmap->set_from_pixbuf($pixbuf);

        
        $box->pack_start($this->button);
        $box->pack_start($pixmap);

        $this->style  = new GtkStyle;
        $this->connect_simple('clicked', array($this, 'SelColor'));
	$this->show();
    }
    /***********************************************************/
    /* Changes the color
    /***********************************************************/
    function set_text($data)
    {
        $this->entry_data = $data;
//        $style = new GtkStyle;
  //      $style->bg[GTK_STATE_NORMAL] = new GdkColor($data);
    //    $this->button->set_style($style);


	if ($data!='')  $this->button->modify_bg(Gtk::STATE_NORMAL, GdkColor::parse($data));

        $this->button->set_label ($data);
        $style = new GtkStyle;
	//---------comentado por miguel casanova
       // $style->fg[GTK_STATE_NORMAL] = new GdkColor(invcolor($data));
        //$style->font = gdk::font_load ("-adobe-helvetica-bold-r-*-*-*-140-*-*-*-*-*-*");
        $label = $this->button->child;
        //$label->set_style($style);
       // $label->set_text($data);
    }

    /***********************************************************/
    /* Defines the callback
    /***********************************************************/
    function connect_simple($signal, $slot, $param = null)
    {
        $this->button->connect_simple($signal, $slot, $param);
    }

    /***********************************************************/
    /* Returns the color
    /***********************************************************/
    function get_text()
    {

	//$label = $this->button->get_label();
        //$label = $this->button->child;
        //return $label->get();

	return $this->button->get_label();


    }

    /***********************************************************/
    /* Show the button
    /***********************************************************/
    function show()
    {
        $this->widget->show_all();
    }

    /***********************************************************/
    /* Define the size
    /***********************************************************/
    function set_usize($width, $height)
    {
        $this->button->set_usize($width, $height);
    }

    /***********************************************************/
    /* Color Selection Dialog
    /***********************************************************/
    function SelColor()
    {
        $this->cswindow = $cswindow = new GtkWindow();
        $this->cswindow->connect_simple('key_press_event', array(&$this,'KeyTest'), $this->cswindow);
        $this->cswindow->set_position(GTK_WIN_POS_CENTER);
        $cswindow->show();
        $cswindow->set_title(_a('Color Selection'));
        
        $box = new GtkVBox();
        
        $this->cs = $cs = new GtkColorSelection();
        $rgb = $this->get_text();


      


        $int = rgb2int($rgb);


	$color=&new GdkColor($int[0],$int[1],$int[2]);

        $this->cs->set_current_color($color);
        $this->cs->connect_simple('key_press_event', array(&$this,'KeyTest'), $cs);
        $box->pack_start($cs, false, false);
        
        $bt = new GtkButton('ok');
        $bt->connect_simple('clicked', array(&$this,'GetColor'));
        $bt->set_size_request(-1,20);
        $box->pack_start($bt, false, false);
        
        $cswindow->add($box);
        $cswindow->show_all();
    }

    /***********************************************************/
    /* Returns the selected color
    /***********************************************************/
    function GetColor()
    {


	$color = ($this->cs->get_current_color());
        $red   = ($color->red >> 8);
        $green = ($color->green >> 8);
        $blue  = ($color->blue >> 8);
        

  
        $redc   = str_pad(dechex($red),2,'0', STR_PAD_LEFT);
        $greenc = str_pad(dechex($green),2,'0', STR_PAD_LEFT);
        $bluec  = str_pad(dechex($blue),2,'0', STR_PAD_LEFT);
      

/*
        $ac = ($this->cs->get_color());
        $red = (int)($ac[0]*255);
        $green = (int)($ac[1]*255);
        $blue = (int)($ac[2]*255);
        
     */     
        $html_color = "#".dechex($redc).dechex($green).dechex($blue);
	

echo "---#$redc$greenc$bluec";
        $this->set_text("#$redc$greenc$bluec");
        $this->cswindow->Hide();
    }

    /***********************************************************/
    /* KeyTest Method
    /***********************************************************/
    function KeyTest($obj, $window)
    {
        if ($obj->keyval == K_ESC)
        {
            $window->hide();
        }
    }
}
?>
